"use strict";Object.defineProperty(exports, "__esModule", {value: true});












var _chunkDLJ6YR3Dcjs = require('./chunk-DLJ6YR3D.cjs');

// src/del.ts
var _undici = require('undici');
async function del(url, options) {
  const blobApiResponse = await _undici.fetch.call(void 0, _chunkDLJ6YR3Dcjs.getApiUrl.call(void 0, "/delete"), {
    method: "POST",
    headers: {
      ..._chunkDLJ6YR3Dcjs.getApiVersionHeader.call(void 0, ),
      authorization: `Bearer ${_chunkDLJ6YR3Dcjs.getTokenFromOptionsOrEnv.call(void 0, options)}`,
      "content-type": "application/json"
    },
    body: JSON.stringify({ urls: Array.isArray(url) ? url : [url] })
  });
  await _chunkDLJ6YR3Dcjs.validateBlobApiResponse.call(void 0, blobApiResponse);
  await blobApiResponse.json();
}

// src/head.ts

async function head(url, options) {
  const headApiUrl = new URL(_chunkDLJ6YR3Dcjs.getApiUrl.call(void 0, ));
  headApiUrl.searchParams.set("url", url);
  const blobApiResponse = await _undici.fetch.call(void 0, headApiUrl, {
    method: "GET",
    // HEAD can't have body as a response, so we use GET
    headers: {
      ..._chunkDLJ6YR3Dcjs.getApiVersionHeader.call(void 0, ),
      authorization: `Bearer ${_chunkDLJ6YR3Dcjs.getTokenFromOptionsOrEnv.call(void 0, options)}`
    }
  });
  await _chunkDLJ6YR3Dcjs.validateBlobApiResponse.call(void 0, blobApiResponse);
  const headResult = await blobApiResponse.json();
  return mapBlobResult(headResult);
}
function mapBlobResult(blobResult) {
  return {
    ...blobResult,
    uploadedAt: new Date(blobResult.uploadedAt)
  };
}

// src/list.ts

async function list(options) {
  var _a;
  const listApiUrl = new URL(_chunkDLJ6YR3Dcjs.getApiUrl.call(void 0, ));
  if (options == null ? void 0 : options.limit) {
    listApiUrl.searchParams.set("limit", options.limit.toString());
  }
  if (options == null ? void 0 : options.prefix) {
    listApiUrl.searchParams.set("prefix", options.prefix);
  }
  if (options == null ? void 0 : options.cursor) {
    listApiUrl.searchParams.set("cursor", options.cursor);
  }
  if (options == null ? void 0 : options.mode) {
    listApiUrl.searchParams.set("mode", options.mode);
  }
  const blobApiResponse = await _undici.fetch.call(void 0, listApiUrl, {
    method: "GET",
    headers: {
      ..._chunkDLJ6YR3Dcjs.getApiVersionHeader.call(void 0, ),
      authorization: `Bearer ${_chunkDLJ6YR3Dcjs.getTokenFromOptionsOrEnv.call(void 0, options)}`
    }
  });
  await _chunkDLJ6YR3Dcjs.validateBlobApiResponse.call(void 0, blobApiResponse);
  const results = await blobApiResponse.json();
  if ((options == null ? void 0 : options.mode) === "folded") {
    return {
      folders: (_a = results.folders) != null ? _a : [],
      cursor: results.cursor,
      hasMore: results.hasMore,
      blobs: results.blobs.map(mapBlobResult2)
    };
  }
  return {
    cursor: results.cursor,
    hasMore: results.hasMore,
    blobs: results.blobs.map(mapBlobResult2)
  };
}
function mapBlobResult2(blobResult) {
  return {
    ...blobResult,
    uploadedAt: new Date(blobResult.uploadedAt)
  };
}

// src/copy.ts

async function copy(fromUrl, toPathname, options) {
  if (!options) {
    throw new (0, _chunkDLJ6YR3Dcjs.BlobError)("missing options, see usage");
  }
  if (options.access !== "public") {
    throw new (0, _chunkDLJ6YR3Dcjs.BlobError)('access must be "public"');
  }
  const headers = {
    ..._chunkDLJ6YR3Dcjs.getApiVersionHeader.call(void 0, ),
    authorization: `Bearer ${_chunkDLJ6YR3Dcjs.getTokenFromOptionsOrEnv.call(void 0, options)}`
  };
  if (options.addRandomSuffix !== void 0) {
    headers["x-add-random-suffix"] = options.addRandomSuffix ? "1" : "0";
  }
  if (options.contentType) {
    headers["x-content-type"] = options.contentType;
  }
  if (options.cacheControlMaxAge !== void 0) {
    headers["x-cache-control-max-age"] = options.cacheControlMaxAge.toString();
  }
  const blobApiResponse = await _undici.fetch.call(void 0, 
    _chunkDLJ6YR3Dcjs.getApiUrl.call(void 0, `/${toPathname}?fromUrl=${fromUrl}`),
    { method: "PUT", headers }
  );
  await _chunkDLJ6YR3Dcjs.validateBlobApiResponse.call(void 0, blobApiResponse);
  return await blobApiResponse.json();
}

// src/index.ts
var put = _chunkDLJ6YR3Dcjs.createPutMethod.call(void 0, {
  allowedOptions: ["cacheControlMaxAge", "addRandomSuffix", "contentType"]
});













exports.BlobAccessError = _chunkDLJ6YR3Dcjs.BlobAccessError; exports.BlobError = _chunkDLJ6YR3Dcjs.BlobError; exports.BlobNotFoundError = _chunkDLJ6YR3Dcjs.BlobNotFoundError; exports.BlobServiceNotAvailable = _chunkDLJ6YR3Dcjs.BlobServiceNotAvailable; exports.BlobStoreNotFoundError = _chunkDLJ6YR3Dcjs.BlobStoreNotFoundError; exports.BlobStoreSuspendedError = _chunkDLJ6YR3Dcjs.BlobStoreSuspendedError; exports.BlobUnknownError = _chunkDLJ6YR3Dcjs.BlobUnknownError; exports.copy = copy; exports.del = del; exports.head = head; exports.list = list; exports.put = put;
//# sourceMappingURL=index.cjs.map